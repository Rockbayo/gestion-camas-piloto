"""Añadir campo valor a Densidad

Revision ID: 82426420c8f7
Revises:
Create Date: 2025-05-07 08:02:50.218293

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision = '82426420c8f7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Verificar y crear vistas si no existen
    conn = op.get_bind()

    # Para vista_produccion_acumulada
    result = conn.execute(text("SHOW TABLES LIKE 'vista_produccion_acumulada'"))
    if not result.fetchone():
        op.create_table('vista_produccion_acumulada',
            sa.Column('siembra_id', sa.Integer(), nullable=False),
            sa.Column('bloque', sa.String(length=20), nullable=True),
            sa.Column('cama', sa.String(length=10), nullable=True),
            sa.Column('lado', sa.String(length=10), nullable=True),
            sa.Column('variedad', sa.String(length=100), nullable=True),
            sa.Column('flor', sa.String(length=10), nullable=True),
            sa.Column('color', sa.String(length=20), nullable=True),
            sa.Column('fecha_siembra', sa.Date(), nullable=True),
            sa.Column('fecha_inicio_corte', sa.Date(), nullable=True),
            sa.Column('total_tallos', sa.Integer(), nullable=True),
            sa.Column('total_cortes', sa.Integer(), nullable=True),
            sa.Column('total_perdidas', sa.Integer(), nullable=True),
            sa.Column('dias_ciclo', sa.Integer(), nullable=True),
            sa.PrimaryKeyConstraint('siembra_id'),
            info={'is_view': True}
        )

    # Para vista_produccion_por_dia
    result = conn.execute(text("SHOW TABLES LIKE 'vista_produccion_por_dia'"))
    if not result.fetchone():
        op.create_table('vista_produccion_por_dia',
            sa.Column('variedad_id', sa.Integer(), nullable=False),
            sa.Column('dias_desde_siembra', sa.Integer(), nullable=False),
            sa.Column('variedad', sa.String(length=100), nullable=True),
            sa.Column('flor', sa.String(length=10), nullable=True),
            sa.Column('color', sa.String(length=20), nullable=True),
            sa.Column('promedio_tallos', sa.Float(), nullable=True),
            sa.PrimaryKeyConstraint('variedad_id', 'dias_desde_siembra'),
            info={'is_view': True}
        )

    # Eliminar tablas innecesarias (COMENTADO PARA EVITAR ERRORES)
    # with op.batch_alter_table('user_auth', schema=None) as batch_op:
    #     batch_op.drop_index('username')
    #
    # op.drop_table('user_auth')
    # op.drop_table('var_hist')
    #
    # with op.batch_alter_table('labores', schema=None) as batch_op:
    #     batch_op.drop_index('labor_UNIQUE')
    #
    # op.drop_table('labores')

    # MODIFICACIÓN PRINCIPAL: Manejo seguro del cambio de tipo de bloque_id
    # 1. Primero eliminar la restricción de clave foránea
    with op.batch_alter_table('bloques_camas_lado', schema=None) as batch_op:
        batch_op.drop_constraint('bloques_camas_lado_ibfk_1', type_='foreignkey')

    # 2. Cambiar el tipo en la tabla bloques
    with op.batch_alter_table('bloques', schema=None) as batch_op:
        batch_op.alter_column('bloque_id',
                            existing_type=mysql.TINYINT(),
                            type_=sa.SmallInteger(),
                            existing_nullable=False,
                            autoincrement=True)

    # 3. Cambiar el tipo en la tabla bloques_camas_lado y recrear la clave foránea
    with op.batch_alter_table('bloques_camas_lado', schema=None) as batch_op:
        batch_op.alter_column('bloque_id',
                            existing_type=mysql.TINYINT(),
                            type_=sa.SmallInteger(),
                            existing_nullable=True)
        # Recrear la clave foránea
        batch_op.create_foreign_key(
            'bloques_camas_lado_ibfk_1',
            'bloques', ['bloque_id'], ['bloque_id'])
        batch_op.drop_index('idx_bloque_cama')

    # Resto de operaciones
    with op.batch_alter_table('cortes', schema=None) as batch_op:
        batch_op.drop_index('idx_fecha_corte')

    with op.batch_alter_table('densidades', schema=None) as batch_op:
        batch_op.add_column(sa.Column('valor', sa.Float(), nullable=False))

    with op.batch_alter_table('siembras', schema=None) as batch_op:
        batch_op.drop_index('idx_estado')
        batch_op.drop_index('idx_fecha_inicio_corte')
        batch_op.drop_index('idx_fecha_siembra')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('siembras', schema=None) as batch_op:
        batch_op.create_index('idx_fecha_siembra', ['fecha_siembra'], unique=False)
        batch_op.create_index('idx_fecha_inicio_corte', ['fecha_inicio_corte'], unique=False)
        batch_op.create_index('idx_estado', ['estado'], unique=False)

    with op.batch_alter_table('densidades', schema=None) as batch_op:
        batch_op.drop_column('valor')

    with op.batch_alter_table('cortes', schema=None) as batch_op:
        batch_op.create_index('idx_fecha_corte', ['fecha_corte'], unique=False)

    # MODIFICACIÓN PARA EL DOWNGRADE: Manejo seguro de la reversión
    # 1. Eliminar la restricción de clave foránea
    with op.batch_alter_table('bloques_camas_lado', schema=None) as batch_op:
        batch_op.drop_constraint('bloques_camas_lado_ibfk_1', type_='foreignkey')

    # 2. Cambiar el tipo en bloques_camas_lado
    with op.batch_alter_table('bloques_camas_lado', schema=None) as batch_op:
        batch_op.alter_column('bloque_id',
                            existing_type=sa.SmallInteger(),
                            type_=mysql.TINYINT(),
                            existing_nullable=True)
        batch_op.create_index('idx_bloque_cama', ['bloque_id', 'cama_id'], unique=False)

    # 3. Cambiar el tipo en bloques
    with op.batch_alter_table('bloques', schema=None) as batch_op:
        batch_op.alter_column('bloque_id',
                            existing_type=sa.SmallInteger(),
                            type_=mysql.TINYINT(),
                            existing_nullable=False,
                            autoincrement=True)

    # 4. Recrear la clave foránea
    with op.batch_alter_table('bloques_camas_lado', schema=None) as batch_op:
        batch_op.create_foreign_key(
            'bloques_camas_lado_ibfk_1',
            'bloques', ['bloque_id'], ['bloque_id'])

    # Resto de operaciones de downgrade
    op.create_table('labores',
    sa.Column('labor_id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('labor', mysql.VARCHAR(length=20), nullable=False),
    sa.PrimaryKeyConstraint('labor_id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('labores', schema=None) as batch_op:
        batch_op.create_index('labor_UNIQUE', ['labor'], unique=True)

    op.create_table('var_hist',
    sa.Column('var_hist_id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('variedad_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('variedad', mysql.VARCHAR(length=100), nullable=True),
    sa.PrimaryKeyConstraint('var_hist_id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('user_auth',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', mysql.VARCHAR(length=20), nullable=False),
    sa.Column('password_hash', mysql.VARCHAR(length=128), nullable=False),
    sa.Column('usuario_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['usuario_id'], ['usuarios.usuario_id'], name='user_auth_ibfk_1'),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('user_auth', schema=None) as batch_op:
        batch_op.create_index('username', ['username'], unique=True)

    # Eliminar las vistas solo si existen
    result = conn.execute(text("SHOW TABLES LIKE 'vista_produccion_por_dia'"))
    if result.fetchone():
        op.drop_table('vista_produccion_por_dia')

    result = conn.execute(text("SHOW TABLES LIKE 'vista_produccion_acumulada'"))
    if result.fetchone():
        op.drop_table('vista_produccion_acumulada')
    # ### end Alembic commands ###